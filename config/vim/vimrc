set nocompatible

if has('nvim')
  set runtimepath^=~/.vim
  set runtimepath+=~/.vim/after
endif

let s:dotfiles_dir = fnamemodify(resolve(expand('<sfile>:p')), ':h:h')
let s:vimrc_dir = s:dotfiles_dir.'/vim'

set backspace=eol,start,indent
set cursorline
set display=lastline
set hidden
set laststatus=2
set list
set listchars=tab:\|\ ,trail:.,extends:>,precedes:<
set matchtime=2
set number
set showcmd
set showmatch
set showtabline=1
set splitbelow
set splitright
set wildmenu
set wildmode=full
set foldmethod=indent
set foldlevel=5

set ignorecase
set smartcase
set hlsearch
set incsearch

set shiftwidth=2
set tabstop=8
set softtabstop=2
set expandtab

filetype plugin indent on
syntax enable on

" Backup / Undo / Swap files
set backup
set writebackup
set swapfile
set undolevels=1024
if has('nvim')
  let s:backupdir = expand("~/.config/nvim/backup")
  let s:undodir = expand("~/.config/nvim/undo")
else
  let s:backupdir = expand("~/.config/vim/backup")
  let s:undodir = expand("~/.config/vim/undo")
endif
let &backupdir = s:backupdir
let &undodir = s:undodir
silent! call mkdir(s:backupdir, "p", 0755)
silent! call mkdir(s:undodir, "p", 0755)
set backupext=.bck
set undofile

augroup HandleLargeFile
  function! s:handle_large_file()
    let large_file_size = 20 * 1024 * 1024
    if getfsize(expand('<afile>')) > large_file_size
      setlocal nobackup
      setlocal noswapfile
    endif
  endfunction
  autocmd BufReadPre * call s:handle_large_file()
augroup END

" Let Alt work in vim
if has('nvim') == 0 && has('gui_running') == 0
  function! s:metacode(key)
    exec "set <M-".a:key.">=\e".a:key
  endfunc
  for i in range(10)
    call s:metacode(nr2char(char2nr('0') + i))
  endfor
  for i in range(26)
    call s:metacode(nr2char(char2nr('a') + i))
    call s:metacode(nr2char(char2nr('A') + i))
  endfor
  for c in [',', '.', '/', ';', '{', '}']
    call s:metacode(c)
  endfor
  for c in ['?', ':', '-', '_', '+', '=', "'"]
    call s:metacode(c)
  endfor
endif

" Key mappings
let g:mapleader = "\<Space>"
inoremap jk <ESC>
nnoremap <leader>w <cmd>w<cr>
nnoremap `n <cmd>noh<cr>
inoremap {<cr> {<cr>}<esc>ko

" Don't use Ex mode, use Q for formatting
nnoremap Q gq

inoremap <c-a> <home>
inoremap <c-e> <end>
inoremap <c-d> <del>
inoremap <c-_> <c-k>
inoremap <c-f> <right>
inoremap <c-b> <left>
inoremap <m-b> <c-left>
inoremap <m-f> <c-right>

inoremap <c-h> <left>
inoremap <c-j> <down>
inoremap <c-k> <up>
inoremap <c-l> <right>

nnoremap <m-j> gj
nnoremap <m-k> gk
inoremap <m-j> <c-o>gj
inoremap <m-k> <c-o>gk

nnoremap <m-H> <c-w>h
nnoremap <m-L> <c-w>l
nnoremap <m-J> <c-w>j
nnoremap <m-K> <c-w>k
inoremap <m-H> <c-o><c-w>h
inoremap <m-L> <c-o><c-w>l
inoremap <m-J> <c-o><c-w>j
inoremap <m-K> <c-o><c-w>k

command! -bang Q q
command! -bang QA qa
command! -bang Qa qa
command! -bang W w
command! -bang WQ wq
command! -bang Wq wq

" Restore cursor to file position in previous editing session
autocmd BufReadPost *
        \ if line("'\"") > 1 && line("'\"") <= line("$") |
        \   exe "normal! g`\"" |
        \ endif

" Automatically load .vimrc source when saved
autocmd! BufWritePost *vimrc source $MYVIMRC

execute 'source '.fnameescape(s:vimrc_dir.'/plugin.vim')
try | colorscheme codedark | catch /.*/ | endtry
